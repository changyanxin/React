{"version":3,"sources":["Todolist2/Todoinput.js","Todolist2/Todoing.js","Todolist/Storage.js","Todolist2/Todolist.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["TodoInput","handleInput","e","keyCode","props","add","target","value","bind","state","inputValue1","type","placeholder","onKeyDown","this","Component","Todoing","todo","map","item","idx","class","onChange","del","key","onClick","storage","set","localStorage","setItem","JSON","stringify","get","parse","getItem","remove","removeItem","Todoinput","addData","className","ref","checked","checkboxChage","title","removeData","Todolist","refs","tempList","list","push","setState","splice","todolist","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.715b1bff.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        //当前组件存数据的对象\r\n        this.state={\r\n            inputValue1:'',\r\n            inputValue1:'',\r\n            inputValue2:''\r\n        }\r\n    }\r\n\r\n    // 不考虑this的情况\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    // handleChange=(e)=>{\r\n    //     this.setState({\r\n    //         //属性值是一个字符串\r\n    //         // [e.target.name]:e.target.value\r\n    //         [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n    //     })\r\n    // }\r\n    // componentDidMount(){\r\n    //     // 刷新页面第一个input直接获取焦点\r\n    //     // ref = a;//替代ref={(inp)=>{this.inputValue=inp}}\r\n    //     // this.refs.inputValue.focus()\r\n        \r\n    //     this.inputValue.focus();\r\n    // }\r\n    render() {\r\n        return (\r\n            // 父组件，top的input\r\n            <div>\r\n                <span>ToDoList</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type='text' placeholder='添加ToDo' onKeyDown={this.handleInput}/>\r\n            </div>\r\n            //<div className={this.state.inputValue+this.state.inputValue1+this.state.inputValue2>10?\".box1\":\"\"}>\r\n                // {/* {}相当于一个js环境，为其添加鼠标按下事件 */}\r\n                // {/* 受控组件：value值被react控制的表单元素 */}\r\n                // {/* 可以实时获取表单元素的值（表单验证）,写法麻烦 */}\r\n                // {/* 受控组件：1. 给input标签添加value属性，赋值为state的值\r\n                //     2. 给input标签添加onChange事件，在数件处理函数中setState\r\n                //     3. 一个事件处理函数控制多个表单元素时，给input添加name属性，事件处理函数中写\r\n                //     setState({[e.target.name]:e.target.value})\r\n                // */}\r\n                // <label htmlFor=\"inp\">请输入第一个数</label>\r\n                // <input id=\"inp\" ref={(inp)=>{this.inputValue=inp}} name=\"inputValue\"  onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                // +\r\n                // <input name=\"inputValue1\"  onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                // +\r\n                // <input name=\"inputValue2\"  onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                // =\r\n                // <p>{this.state.inputValue+this.state.inputValue1+this.state.inputValue2}</p>\r\n                // {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                // <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                // <button \r\n                //     // 加css行内样式：大括号加对象,自动加单位\r\n                //     style={ {color:\"red\",fontSize:\"10px\"} }\r\n                //     className=\"box\" onClick={()=>{console.log(this.inp.value)}}>提交</button>            \r\n            //</div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropsTypes from 'prop-types' \r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        var {todo} = this.props;\r\n        var index;\r\n        return (\r\n          <div>\r\n            <ul>\r\n              <div>正在进行</div>\r\n              {\r\n                todo.map((item,idx)=>{\r\n                    return (\r\n                      <div>\r\n                        <input class=\"one\" type=\"checkbox\" onChange={(e)=>this.props.del(idx,e)}/>\r\n                        <li class=\"two\" key={idx}>{item}&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                        </li>\r\n                      </div>\r\n                    )\r\n                })  //其中this.props.del不能直接加小括号，因为这表示调用\r\n              }              \r\n            </ul>\r\n            <ul>\r\n              <div>已经完成</div>\r\n              {\r\n                todo.map((item,idx)=>{\r\n                    return <div>\r\n                      <div>\r\n                        <input class=\"one\" type=\"checkbox\"/>\r\n                        <li class=\"two\" key={idx}>{item}&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                        </li>\r\n                      </div>\r\n                    </div>\r\n                })  //其中this.props.del不能直接加小括号，因为这表示调用\r\n              }              \r\n            </ul>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n//定义Todoing类的属性\r\n// Todoing.propTypes = {\r\n//   todo:PropsTypes.array,\r\n//   del:PropsTypes.func\r\n// }\r\n\r\n// Todoing.defaultProps = {\r\n//   todo:[1,2,3,4,4]\r\n// }\r\n\r\n","var storage={\r\n\r\n\r\n    set(key,value){\r\n\r\n        localStorage.setItem(key,JSON.stringify(value));\r\n    },\r\n    get(key){\r\n\r\n        return JSON.parse(localStorage.getItem(key));\r\n\r\n    },\r\n    remove(key){\r\n\r\n        localStorage.removeItem(key)\r\n    }\r\n};\r\n\r\nexport default storage;","import TodoInput from './Todoinput'\r\nimport Todoing from './Todoing'\r\nimport Todo from './todo.css'\r\n\r\nimport React, { Component } from 'react'\r\n\r\n// 父组件\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[]\r\n        };\r\n        /**\r\n         * 深拷贝/浅拷贝\r\n         * \r\n         var obj = {a:100,b:[1,2,3]}\r\n         var obj1 = {c:100}\r\n         var o = obj;\r\n         var o Object.assign({},obj,obj1);对象的整合 a,b,c\r\n         var oo = JSON.parse(JSON.stringify(obj));\r\n         o.b[0] = 4;\r\n         o.a = 200;\r\n         console.log(obj);\r\n         Object.keys(obj).forEach((item)=>{\r\n             console.log(item);\r\n             console.log(obj[item]);\r\n         });//结果是一个数组\r\n        */\r\n         \r\n    }\r\n    addItem = (data)=>{\r\n        //使用this方法传入数据，展开运算符 \r\n        this.setState({  \r\n            todo:[...this.state.todo,data]\r\n        },()=>{\r\n            // localStorage.setItem();\r\n        })\r\n    }\r\n    delItem=(idx,e)=>{\r\n        //1. 不能直接改变或处理state，通过setState改变\r\n        console.log(idx,e);\r\n        //2. setState是异步执行\r\n         this.setState((state,props)=>{\r\n            let todo=[...this.state.todo];\r\n            todo.splice(idx,1);\r\n            console.log(state.todo);\r\n            return {\r\n                todo:todo\r\n                //  todo:state.todo.filter((item,index)=>{idx!==index})\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* add为属性 */}\r\n                <TodoInput add={this.addItem} del={this.delItem}/>\r\n                {/* 一个组件上可以绑定多个属性 */}\r\n                <Todoing del={this.delItem} add={this.addItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        //当前组件存数据的对象\r\n        // this.state={\r\n        //     inputValue1:'',\r\n        //     inputValue1:'',\r\n        //     inputValue2:''\r\n        // }\r\n    }\r\n\r\n    // 不考虑this的情况\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.addData(e.target.value);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"title\">\r\n                    TodoList:<input ref=\"title\" onKeyDown={this.handleInput}/> \r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        // this.state.list.\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                <h2>待办事项</h2>\r\n\r\n                <ul>\r\n                    {\r\n                        (todo || []).map((value,key)=>{\r\n\r\n                            if(!value.checked){\r\n\r\n                                return (\r\n\r\n                                    <li key={key}>\r\n\r\n                                        <input type=\"checkbox\" checked={value.checked} \r\n                                        onChange={this.checkboxChage.bind(this,key)} />\r\n\r\n                                        {value.title}-- \r\n                                        <button onClick={this.removeData.bind(this,key)}>删除</button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n\r\n                        })\r\n\r\n\r\n                    }\r\n                </ul>           \r\n\r\n\r\n\r\n                <h2>已完成事项</h2>\r\n                <ul>\r\n                    {\r\n                        (todo || []).map((value,key)=>{\r\n\r\n                            if(value.checked){\r\n\r\n                                return (\r\n\r\n                                    <li key={key}>\r\n\r\n                                        <input type=\"checkbox\" checked={value.checked} \r\n                                        onChange={this.checkboxChage.bind(this,key)} />\r\n\r\n                                        {value.title}-- \r\n                                        <button onClick={this.removeData.bind(this,key)}>删除</button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n\r\n                        })\r\n                    }\r\n                </ul>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Component} from 'react';\r\nimport storage from './Storage';\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\nexport default class Todolist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            list:[\r\n             \r\n            ]\r\n        };\r\n    }   \r\n\r\n    addData=(e)=>{\r\n        //按下回车的时候在增加\r\n            let title=this.refs.title.value;\r\n            let tempList=this.state.list;\r\n\r\n            tempList.push({\r\n                title:title,\r\n                checked:false\r\n            })\r\n            //改变后的值赋值给list\r\n\r\n            this.setState({\r\n\r\n                list:tempList\r\n            })\r\n\r\n            //表单置为空\r\n            this.refs.title.value='';\r\n\r\n            //执行缓存数据           \r\n\r\n            storage.set('todolist',tempList);\r\n\r\n\r\n        \r\n    }\r\n    checkboxChage=(key)=>{\r\n\r\n        // alert('111');\r\n        let tempList=this.state.list;\r\n        tempList[key].checked=!tempList[key].checked;\r\n        this.setState({\r\n            list:tempList\r\n        })\r\n\r\n        //执行缓存数据\r\n        storage.set('todolist',tempList);\r\n\r\n    }\r\n    removeData=(key)=>{\r\n        let tempList=this.state.list;\r\n        tempList.splice(key,1);\r\n        this.setState({\r\n            list:tempList\r\n        })\r\n        //执行缓存数据\r\n        storage.set('todolist',tempList);\r\n    }\r\n    //生命周期函数  页面加载就会触发\r\n    componentDidMount(){\r\n        //获取缓存的数据\r\n        var todolist=storage.get('todolist');  \r\n        if(todolist){\r\n            this.setState({\r\n\r\n                list:todolist\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n               <Todoinput/>\r\n               <Todoing/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React,{Fragment,Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport Todolist2 from './Todolist2/Todolist';\r\nimport Todolist from './Todolist/Todolist';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n      \r\n       <Todolist/>,\r\n       \r\n       document.querySelector(\"#root\")\r\n              \r\n);\r\n\r\n\r\n"],"sourceRoot":""}